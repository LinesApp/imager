{"name":"node-imager","tagline":"A node.js module to resize, crop and upload images to Rackspace cloudfiles and Amazon S3","body":"[![Build Status](https://img.shields.io/travis/imagerjs/imager/master.svg?style=flat)](https://travis-ci.org/imagerjs/imager)\r\n[![Gittip](https://img.shields.io/gratipay/madhums.svg?style=flat)](https://www.gratipay.com/madhums/)\r\n[![Dependencies](https://img.shields.io/david/imagerjs/imager.svg?style=flat)](https://david-dm.org/imagerjs/imager)\r\n\r\n**wip**: This is work in progress. Converting to use generators and [graphicsmagick-stream](https://github.com/e-conomic/graphicsmagick-stream) library. The uploading is handled by [pkgcloud](https://github.com/pkgcloud/pkgcloud). The master branch and 1.0.0-alpha1 tag works only with s3.\r\n\r\n## Imager\r\n\r\nA node module to resize, crop and upload images (with different variants and presets) to the cloud.\r\n\r\n## Dependencies\r\n\r\n1. node >= 0.11.12 with `--harmony` flag\r\n2. You need to install libgraphicsmagicks.\r\n\r\n  Using osx\r\n\r\n  ```sh\r\n  $ brew install graphicsmagick --build-from-source\r\n  ```\r\n\r\n  Using ubuntu\r\n\r\n  ```sh\r\n  $ sudo apt-get install libgraphicsmagick1-dev\r\n  ```\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install imager\r\n```\r\n\r\n## Config\r\n\r\nUse a config file. For example [imager-config.js](https://github.com/imagerjs/imager/blob/master/test/imager.js)\r\n\r\n### variants\r\n\r\n```js\r\nexports.variants = {\r\n  item: {             // variant\r\n    thumb: {          // preset\r\n      options: {      // preset options\r\n        pool: 5,\r\n        scale: { width: 200, height: 150, type: 'contain' },\r\n        crop: { width: 200, height: 150, x: 0, y: 0 },\r\n        format: 'png',\r\n        rotate: 'auto',\r\n      }\r\n    },\r\n    large: {\r\n      original: true  // upload original image without image processing\r\n    }\r\n  },\r\n  gallery: {\r\n    // ...\r\n  }\r\n};\r\n```\r\n\r\nIn the above config, item and gallery are variants. thumb and large are presets. Each preset has an options object which is a [graphicsmagick-stream](https://github.com/e-conomic/graphicsmagick-stream#usage) config object.\r\n\r\n#### preset options\r\n\r\n- `options` - An object that is passed to graphicsmagick. See what options are available [here](https://github.com/e-conomic/graphicsmagick-stream#usage)\r\n- `rename` - A function that accepts an object `file` as an argument. It has the following properties: `name`, `size`, `type` and `path`. It is called before uploading each file.\r\n\r\n  Example:\r\n  ```js\r\n  variants.item.thumb.rename = function (file) {\r\n    return 'users/1/thumb/' + file.name;\r\n  };\r\n  var imager = new Imager(variants.item, ...);\r\n  ```\r\n- `original` - A true value. If this option is set, the original image will be uploaded without any image processing.\r\n\r\n### storages\r\n\r\n```js\r\nexports.storages = {\r\n  local: {\r\n    provider: 'local',\r\n    path: '/tmp',\r\n    mode: 0777\r\n  },\r\n  rackspace: {\r\n    provider: 'rackspace',\r\n    username: process.env.IMAGER_RACKSPACE_USERNAME,\r\n    apiKey: process.env.IMAGER_RACKSPACE_KEY,\r\n    authUrl: 'https://lon.auth.api.rackspacecloud.com',\r\n    region: 'IAD', // https://github.com/pkgcloud/pkgcloud/issues/276\r\n    container: process.env.IMAGER_RACKSPACE_CONTAINER\r\n  },\r\n  amazon: {\r\n    provider: 'amazon',\r\n    key: process.env.IMAGER_S3_KEY,\r\n    keyId: process.env.IMAGER_S3_KEYID,\r\n    container: process.env.IMAGER_S3_BUCKET\r\n  }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar Imager = require('imager');\r\nvar config = require('./imager-config.js');\r\nvar imager = new Imager(config.variants.item, config.storages.amazon);\r\n// You can also pass only the storage without a variant which will simply\r\n// upload the original image\r\n// new Imager(storages.amazon)\r\n```\r\n\r\n## API\r\n\r\n### .upload(files, callback)\r\n\r\n`files` is an array of files or a single file. A file can be a file object, absolute file path pointing a local file or base64 encoded image data. `callback` accepts `err` and an object containing the array of uploaded images.\r\n\r\n```js\r\nvar config = require('./imager-config.js');\r\nvar imager = new Imager(config.variants.item, config.storages.amazon);\r\nimager.upload(files, function (err, avatar) {\r\n  // avatar =>\r\n  // {\r\n  //   thumb: [ 'https://fudge.s3.amazonaws.com/user/1/thumb/image-1.png', ],\r\n  //   large: [ 'https://fudge.s3.amazonaws.com/user/1/large/image-1.png', ]\r\n  // }\r\n});\r\n```\r\n\r\n### .remove(files, callback)\r\n\r\n`files` is an array of files or a single file. A file should be the file name of the image on the storage. `callback` accepts `err` as an argument.\r\n\r\n```js\r\nvar config = require('./imager-config.js');\r\nvar imager = new Imager(config.storages.amazon);\r\nvar files = ['file-1.png']; // or just 'file-1.png'\r\nimager.remove(files, function (err) {\r\n\r\n});\r\n```\r\n\r\n### .regenerate()\r\n\r\n## Tests\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n## TODO\r\n\r\n- Support base64 image uploads\r\n- <del>Implement `.remove()`</del>\r\n- Implement `.regenerate()`\r\n- Test the api's for rackspace\r\n\r\n## License\r\n\r\nMIT","google":"UA-32621427-1","note":"Don't delete this file! It's used internally to help with page regeneration."}